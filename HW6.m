% Mukhamedzhan Nurmukhamed 
%ROBT 403 Laboratory 5: Joint Control of 3-DOF RRR Manipulator

clear;
rad_to_deg = pi/180;

L(1) = Revolute('d', 1, 'a', 0, 'alpha', pi/2, ...
    'I', [0, 0, 0], ...
    'r', [0, 0, 0.5], ...
    'm', 0, ...
    'Jm', 1e-4, ...
    'G', 500, ...
    'B', 10e-4, ...
    'Tc', 10e-4, ...
    'qlim', [-180 180]*rad_to_deg );

L(2) = Revolute('d', 0, 'a', 1, 'alpha', 0, ...
    'I', [0.0125, 0.83958, 0.83958], ...
    'r', [0.5, 0, 0], ...
    'm', 10, ...
    'Jm', 1e-4, ...
    'G', 500, ...
    'B', 10e-4, ...
    'Tc', 10e-4, ...
    'qlim', [-90 90]*rad_to_deg );

L(3) = Revolute('d', 0, 'a', 1, 'alpha', 0,  ...
    'I', [0.0125, 0.83958, 0.83958], ...
    'r', [1.5, 0, 0], ...
    'm', 10, ...
    'Jm', 1e-4, ...
    'G', 500, ...
    'B', 10e-4, ...
    'Tc', 10e-4, ...
    'qlim', [-90 90]*rad_to_deg );

RRR_Manipulator = SerialLink(L, 'name', 'RRR-Manipulator (3 DOF)');

position_HOME = [0 pi/2 0];
position_HOLD = [0 0 0]; 
clear L



figure(1)
RRR_Manipulator.plot(position_HOME)
%RRR_Manipulator.teach()

%Home position of the RRR-Manipulator
Jacobian_1 = RRR_Manipulator.jacob0(position_HOME);
gravitational_load_1 = RRR_Manipulator.gravload([0, 0, 1]);
Torque_1 = Jacobian_1.*gravitational_load_1

figure(2)
RRR_Manipulator.plot(position_HOLD)
%RRR_Manipulator.teach()

%Hold position of the RRR-Manipulator
Jacobian_2 = RRR_Manipulator.jacob0(position_HOLD);
gravitational_load_2 = RRR_Manipulator.gravload([0, 0, 1]);
Torque_2 = Jacobian_2.*gravitational_load_2

